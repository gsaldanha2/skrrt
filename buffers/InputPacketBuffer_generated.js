// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var buffers = buffers || {};

/**
 * @constructor
 */
buffers.InputPacketBuffer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {buffers.InputPacketBuffer}
 */
buffers.InputPacketBuffer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {buffers.InputPacketBuffer=} obj
 * @returns {buffers.InputPacketBuffer}
 */
buffers.InputPacketBuffer.getRootAsInputPacketBuffer = function(bb, obj) {
  return (obj || new buffers.InputPacketBuffer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
buffers.InputPacketBuffer.prototype.laneChange = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {boolean}
 */
buffers.InputPacketBuffer.prototype.slow = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
buffers.InputPacketBuffer.startInputPacketBuffer = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} laneChange
 */
buffers.InputPacketBuffer.addLaneChange = function(builder, laneChange) {
  builder.addFieldInt8(0, laneChange, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} slow
 */
buffers.InputPacketBuffer.addSlow = function(builder, slow) {
  builder.addFieldInt8(1, +slow, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
buffers.InputPacketBuffer.endInputPacketBuffer = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
buffers.InputPacketBuffer.finishInputPacketBufferBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.buffers = buffers;
